package workflows

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
)

func init() {
	_jsii_.RegisterEnum(
		"projen.github.workflows.AppPermission",
		reflect.TypeOf((*AppPermission)(nil)).Elem(),
		map[string]interface{}{
			"READ": AppPermission_READ,
			"WRITE": AppPermission_WRITE,
			"ADMIN": AppPermission_ADMIN,
		},
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.AppPermissions",
		reflect.TypeOf((*AppPermissions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.BranchProtectionRuleOptions",
		reflect.TypeOf((*BranchProtectionRuleOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.CheckRunOptions",
		reflect.TypeOf((*CheckRunOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.CheckSuiteOptions",
		reflect.TypeOf((*CheckSuiteOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.CommonJobDefinition",
		reflect.TypeOf((*CommonJobDefinition)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.ContainerCredentials",
		reflect.TypeOf((*ContainerCredentials)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.ContainerOptions",
		reflect.TypeOf((*ContainerOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.CreateOptions",
		reflect.TypeOf((*CreateOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.CronScheduleOptions",
		reflect.TypeOf((*CronScheduleOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.DeleteOptions",
		reflect.TypeOf((*DeleteOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.DeploymentOptions",
		reflect.TypeOf((*DeploymentOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.DeploymentStatusOptions",
		reflect.TypeOf((*DeploymentStatusOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.DiscussionCommentOptions",
		reflect.TypeOf((*DiscussionCommentOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.DiscussionOptions",
		reflect.TypeOf((*DiscussionOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.ForkOptions",
		reflect.TypeOf((*ForkOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.GollumOptions",
		reflect.TypeOf((*GollumOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.IssueCommentOptions",
		reflect.TypeOf((*IssueCommentOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.IssuesOptions",
		reflect.TypeOf((*IssuesOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.Job",
		reflect.TypeOf((*Job)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.JobCallingReusableWorkflow",
		reflect.TypeOf((*JobCallingReusableWorkflow)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.JobDefaults",
		reflect.TypeOf((*JobDefaults)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.JobMatrix",
		reflect.TypeOf((*JobMatrix)(nil)).Elem(),
	)
	_jsii_.RegisterEnum(
		"projen.github.workflows.JobPermission",
		reflect.TypeOf((*JobPermission)(nil)).Elem(),
		map[string]interface{}{
			"READ": JobPermission_READ,
			"WRITE": JobPermission_WRITE,
			"NONE": JobPermission_NONE,
		},
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.JobPermissions",
		reflect.TypeOf((*JobPermissions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.JobStep",
		reflect.TypeOf((*JobStep)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.JobStepConfiguration",
		reflect.TypeOf((*JobStepConfiguration)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.JobStepOutput",
		reflect.TypeOf((*JobStepOutput)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.JobStrategy",
		reflect.TypeOf((*JobStrategy)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.LabelOptions",
		reflect.TypeOf((*LabelOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.MergeGroupOptions",
		reflect.TypeOf((*MergeGroupOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.MilestoneOptions",
		reflect.TypeOf((*MilestoneOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.PageBuildOptions",
		reflect.TypeOf((*PageBuildOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.ProjectCardOptions",
		reflect.TypeOf((*ProjectCardOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.ProjectColumnOptions",
		reflect.TypeOf((*ProjectColumnOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.ProjectOptions",
		reflect.TypeOf((*ProjectOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.PublicOptions",
		reflect.TypeOf((*PublicOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.PullRequestOptions",
		reflect.TypeOf((*PullRequestOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.PullRequestReviewCommentOptions",
		reflect.TypeOf((*PullRequestReviewCommentOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.PullRequestReviewOptions",
		reflect.TypeOf((*PullRequestReviewOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.PullRequestTargetOptions",
		reflect.TypeOf((*PullRequestTargetOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.PushOptions",
		reflect.TypeOf((*PushOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.RegistryPackageOptions",
		reflect.TypeOf((*RegistryPackageOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.ReleaseOptions",
		reflect.TypeOf((*ReleaseOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.RepositoryDispatchOptions",
		reflect.TypeOf((*RepositoryDispatchOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.RunSettings",
		reflect.TypeOf((*RunSettings)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.StatusOptions",
		reflect.TypeOf((*StatusOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.Step",
		reflect.TypeOf((*Step)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.StepConfiguration",
		reflect.TypeOf((*StepConfiguration)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.ToolRequirement",
		reflect.TypeOf((*ToolRequirement)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.Tools",
		reflect.TypeOf((*Tools)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.Triggers",
		reflect.TypeOf((*Triggers)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.WatchOptions",
		reflect.TypeOf((*WatchOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.WorkflowCallOptions",
		reflect.TypeOf((*WorkflowCallOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.WorkflowDispatchOptions",
		reflect.TypeOf((*WorkflowDispatchOptions)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"projen.github.workflows.WorkflowRunOptions",
		reflect.TypeOf((*WorkflowRunOptions)(nil)).Elem(),
	)
}
